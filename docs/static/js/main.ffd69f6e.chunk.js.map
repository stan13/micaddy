{"version":3,"sources":["Dictaphone.js","App.js","serviceWorker.js","index.js"],"names":["Dictaphone","sendAudioAndReset","_callee","regenerator_default","a","wrap","_context","prev","next","_this","props","sendAudio","transcript","resetTranscript","stop","this","_this$props","browserSupportsSpeechRecognition","react_default","createElement","Button","bsStyle","onClick","Glyphicon","glyph","Component","SpeechRecognition","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sendToDialogFlow","text","state","client","textRequest","then","response","console","log","result","metadata","intentName","holeNumber","parameters","getNextIndex","score","shots","setScore","Number","catch","error","holes","indexOf","find","hole","start","slice","middle","end","length","array","concat","setState","shotTotal","map","reduce","s1","s2","idxs","i","push","par","idx","ApiAiClient","accessToken","className","style","height","width","display","position","top","left","verticalAlign","Panel","maxWidth","margin","Heading","Title","componentClass","Body","Table","striped","bordered","condensed","hover","key","src_Dictaphone","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ffd69f6e.chunk.js","sourcesContent":["import React, {Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SpeechRecognition from 'react-speech-recognition';\nimport Button from \"react-bootstrap/es/Button\";\nimport Glyphicon from \"react-bootstrap/es/Glyphicon\";\n\nconst propTypes = {\n    // Props injected by SpeechRecognition\n    transcript: PropTypes.string,\n    resetTranscript: PropTypes.func,\n    browserSupportsSpeechRecognition: PropTypes.bool,\n    sendAudio: PropTypes.func\n};\n\nclass Dictaphone extends Component {\n\n    sendAudioAndReset = async () => {\n        await this.props.sendAudio(this.props.transcript);\n        this.props.resetTranscript();\n    };\n\n    render() {\n        const { transcript, resetTranscript, browserSupportsSpeechRecognition } = this.props;\n\n        if (!browserSupportsSpeechRecognition) {\n            return null\n        }\n\n        return (\n            <div>\n                <Button bsStyle=\"primary\" onClick={this.sendAudioAndReset}>\n                    <Glyphicon glyph=\"arrow-right\" />\n                </Button>\n                <div>\n                    <span>{transcript}</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nDictaphone.propTypes = propTypes;\n\nexport default SpeechRecognition(Dictaphone);","import React, { Component } from 'react';\nimport './App.css';\nimport Table from \"react-bootstrap/es/Table\";\nimport Panel from \"react-bootstrap/es/Panel\";\n\nimport {ApiAiClient} from \"api-ai-javascript\";\nimport Dictaphone from \"./Dictaphone\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const idxs = [9,3,4,5,8,7,1,6,2];\n    const holes = [];\n\n    for (let i = 0; i < 9; i++) {\n      holes.push({\n          hole: i+1,\n          score: null,\n          par: i === 0 || i === 5 ? 3 : (i === 6 || i === 2 ? 5 : 4),\n          idx: idxs[i],\n      });\n    }\n\n    const client = new ApiAiClient({accessToken: '3de2fe2cad364c1b8cf66ce9cd6bb682'});\n\n    this.state = {\n      holes: holes,\n      client: client\n    };\n\n    //recognition.lang = 'en-AU';\n  }\n\n  sendToDialogFlow = (text) => {\n      this.state.client.textRequest(text)\n          .then((response) => {\n              console.log(response);\n              if (response.result.metadata.intentName === 'Enter Score') {\n                  let holeNumber = response.result.parameters.holeNumber;\n                  if (!holeNumber) {\n                      holeNumber = this.getNextIndex() + 1;\n                      console.log(holeNumber);\n                  }\n                  const score = response.result.parameters.shots;\n                  this.setScore(Number(holeNumber), score);\n              }\n          })\n          .catch((error) => {\n              console.log(error);\n          });\n  };\n\n  getNextIndex = () => {\n      return this.state.holes.indexOf(this.state.holes.find(hole => !hole.score));\n  };\n\n  setScore = (hole, score) => {\n      const start = this.state.holes.slice(0, hole-1);\n      const middle = this.state.holes.slice(hole-1, hole);\n      const end = this.state.holes.slice(hole, this.state.holes.length);\n      middle[0].score = score;\n      const array = start.concat(middle).concat(end);\n      console.log(array);\n      this.setState({holes: array});\n  };\n\n  shotTotal = () => {\n      return this.state.holes.map(hole => hole.score).reduce((s1, s2) => Number(s1) + Number(s2));\n  };\n\n  render() {\n    return (\n      <div className=\"App\" style={\n        {\n          height: '100%',\n          width: '100%',\n          display: 'table',\n          position: 'absolute',\n          top: 0,\n          left: 0\n        }}>\n        <div style={{\n            display: 'table-cell',\n            verticalAlign: 'middle'\n        }}>\n          <Panel bsStyle=\"primary\" style={{maxWidth: '400px', verticalAlign: 'middle', margin: 'auto'}}>\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">Scorecard</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n              <Table striped bordered condensed hover>\n                <thead>\n                <tr>\n                  <th>Hole</th>\n                  <th>Par</th>\n                  <th>Index</th>\n                  <th>Player 1</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    this.state.holes.map(hole => {\n                        return (\n                            <tr key={hole.hole}>\n                              <td>{hole.hole}</td>\n                              <td>{hole.par}</td>\n                              <td>{hole.idx}</td>\n                              <td>{hole.score}</td>\n                            </tr>\n                        );\n                    })\n                }\n                <tr>\n                    <td>Total</td>\n                    <td/>\n                    <td/>\n                    <td>{this.shotTotal()}</td>\n                </tr>\n                </tbody>\n              </Table>\n            </Panel.Body>\n          </Panel>\n          <Dictaphone sendAudio={this.sendToDialogFlow}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}